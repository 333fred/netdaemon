<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetDeamon.App</name>
    </assembly>
    <members>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.EntityManager.ExecuteAsync(System.Boolean)">
            <summary>
                Executes the sequence of actions
            </summary>
            <param name="keepItems">
                True if  you want to keep items
            </param>
            <remarks>
                You want to keep the items when using this as part of an automation
                that are kept over time. Not keeping when just doing a command
            </remarks>
            <returns></returns>
        </member>
        <member name="T:JoySoftware.HomeAssistant.NetDaemon.Common.FluentExpandoObject">
            <summary>
                A custom expando object to alow to return null values if properties does not exist
            </summary>
            <remarks>
                Thanks to @lukevendediger for original code and inspiration
                https://gist.github.com/lukevenediger/6327599
            </remarks>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.FluentExpandoObject.#ctor(System.Boolean,System.Boolean,System.Dynamic.ExpandoObject)">
            <summary>
                Creates a BetterExpando object/
            </summary>
            <param name="ignoreCase">Don't be strict about property name casing.</param>
            <param name="returnNullMissingProperties">If true, returns String.Empty for missing properties.</param>
            <param name="root">An ExpandoObject to consume and expose.</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.FluentExpandoObject.Augment(JoySoftware.HomeAssistant.NetDaemon.Common.FluentExpandoObject)">
            <summary>
                Combine two instances together to get a union.
            </summary>
            <returns>This instance but with additional properties</returns>
            <remarks>Existing properties are not overwritten.</remarks>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.FluentExpandoObject.HasProperty(System.String)">
            <summary>
                Check if BetterExpando contains a property.
            </summary>
            <remarks>Respects the case sensitivity setting</remarks>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.FluentExpandoObject.ToString">
            <summary>
                Returns this object as comma-separated name-value pairs.
            </summary>
        </member>
        <member name="T:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemonApp">
            <summary>
            Interface that all NetDaemon apps needs to implement
            </summary>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemonApp.StartUpAsync(JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon)">
            <summary>
            Start the application, normally implemented by the base class
            </summary>
            <param name="daemon"></param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemonApp.InitializeAsync">
            <summary>
            Init the application, is called by the NetDaemon after startup
            </summary>
        </member>
        <member name="T:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon">
            <summary>
                The interface that interacts with the daemon main logic
            </summary>
        </member>
        <member name="P:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.Logger">
            <summary>
                Logger to use
            </summary>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.ListenState(System.String,System.Func{System.String,JoySoftware.HomeAssistant.NetDaemon.Common.EntityState,JoySoftware.HomeAssistant.NetDaemon.Common.EntityState,System.Threading.Tasks.Task})">
            <summary>
                Listen to statechange
            </summary>
            <param name="pattern">Match pattern, entity_id or domain</param>
            <param name="action">The func to call when matching</param>
            <remarks>
                The callback function is
                    - EntityId
                    - newEvent
                    - oldEvent
            </remarks>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.ListenEvent(System.String,System.Func{System.String,System.Object,System.Threading.Tasks.Task})">
            <summary>
                Listen to state change
            </summary>
            <param name="ev">The event to listen to</param>
            <param name="action">The action to call when event fires</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.ListenEvent(System.Func{JoySoftware.HomeAssistant.NetDaemon.Common.FluentEventProperty,System.Boolean},System.Func{System.String,System.Object,System.Threading.Tasks.Task})">
            <summary>
                Listen to event state
            </summary>
            <param name="funcSelector">Using lambda expression to select event</param>
            <param name="action">The action to call when event fires</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.TurnOnAsync(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
                Turn on entity who support the service call
            </summary>
            <param name="entityId">The unique id of the entity</param>
            <param name="attributes">Name/Value pair of the attribute</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.TurnOffAsync(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
                Turn off entity who support the service call
            </summary>
            <param name="entityId">The unique id of the entity</param>
            <param name="attributes">Name/Value pair of the attribute</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.ToggleAsync(System.String,System.ValueTuple{System.String,System.Object}[])">
            <summary>
                Toggle entity who support the service call
            </summary>
            <param name="entityId">The unique id of the entity</param>
            <param name="attributes">Name/Value pair of the attribute</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.SetState(System.String,System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
                Set entity state
            </summary>
            <param name="entityId">The unique id of the entity</param>
            <param name="state">The state being set</param>
            <param name="attributes">Name/Value pair of the attribute</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.CallService(System.String,System.String,System.Object,System.Boolean)">
            <summary>
                Calls a service
            </summary>
            <param name="domain">The domain of the service</param>
            <param name="service">The service being called</param>
            <param name="data">Any data that the service requires</param>
            <param name="waitForResponse">If we should wait for the service to get response from Home Assistant or send/forget scenario</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.SendEvent(System.String,System.Object)">
            <summary>
                Sends a custom event
            </summary>
            <param name="eventId">Any identity of the event</param>
            <param name="data">Any data sent with the event</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.GetState(System.String)">
            <summary>
                Gets current state for the entity
            </summary>
            <param name="entityId">The unique id of the entity</param>
            <returns></returns>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.Entity(System.String[])">
            <summary>
                Selects one or more entities to do action on
            </summary>
            <param name="entityId">The unique id of the entity</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.Entities(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Selects one or more entities to do action on
            </summary>
            <param name="entityId">The unique id of the entity</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.Entities(System.Func{JoySoftware.HomeAssistant.NetDaemon.Common.IEntityProperties,System.Boolean})">
            <summary>
                Selects one or more entities to do action on using lambda
            </summary>
            <param name="func">The lambda expression for selecting entities</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.Event(System.String[])">
            <summary>
                Selects one or more events to do action on
            </summary>
            <param name="eventParams">Events</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.Events(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Selects one or more events to do action on
            </summary>
            <param name="eventParams">Events</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.Events(System.Func{JoySoftware.HomeAssistant.NetDaemon.Common.FluentEventProperty,System.Boolean})">
            <summary>
                Selects the events to do actions on using lambda
            </summary>
            <param name="func">The lambda expression selecting event</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.Light(System.String[])">
            <summary>
                Selects one or more light entities to do action on
            </summary>
            <param name="entityId">The unique id of the entity</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.MediaPlayer(System.String[])">
            <summary>
                Selects one or more media player entities to do action on
            </summary>
            <param name="entityIds">Entity unique id:s</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.MediaPlayers(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Selects one or more media player entities to do action on
            </summary>
            <param name="entityIds">Entity unique id:s</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.MediaPlayers(System.Func{JoySoftware.HomeAssistant.NetDaemon.Common.IEntityProperties,System.Boolean})">
            <summary>
                Selects one or more media player entities to do action on using lambda
            </summary>
            <param name="func">The lambda expression selecting mediaplayers</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.RunScript(System.String[])">
            <summary>
                Runs one or more scripts
            </summary>
            <param name="entityIds">The unique id:s of the script</param>
        </member>
        <member name="P:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.State">
            <summary>
                All current states for all known entities
            </summary>
            <remarks>
                All states are read and cached at startup. Every state change updates the
                states. There can be a small risk that the state is not updated
                exactly when it happens but it should be fine. The SetState function
                updates the state before sending.
            </remarks>
        </member>
        <member name="P:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.Scheduler">
            <summary>
                Schedule actions to fire in different time
            </summary>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.INetDaemon.Speak(System.String,System.String)">
            <summary>
                Use text-to-speech to speak a message
            </summary>
            <param name="entityId">Unique id of the media player the speech should play</param>
            <param name="message">The message that will be spoken</param>
        </member>
        <member name="M:JoySoftware.HomeAssistant.NetDaemon.Common.NetDaemonApp.ListenState(System.String,System.Func{System.String,JoySoftware.HomeAssistant.NetDaemon.Common.EntityState,JoySoftware.HomeAssistant.NetDaemon.Common.EntityState,System.Threading.Tasks.Task})">
            <summary>
                Listen for state changes and call a function when state changes
            </summary>
            <remarks>
                Make function like
                <code>
                ListenState("binary_sensor.pir", async (string entityId, EntityState newState, EntityState oldState) =>
                {
                    await Task.Delay(1000);// Insert some code
                });
                </code>
                Valid patterns are:
                    light.thelight      - En entity id
                    light               - No dot means the whole domain
                    empty               - All events
            </remarks>
            <param name="pattern">Ientity id or domain</param>
            <param name="action">The action to call when state is changed, see remarks</param>
        </member>
    </members>
</doc>
